# Generated by Django 5.2.6 on 2025-09-12 07:30

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('completed_attempts', models.PositiveIntegerField(default=0)),
                ('average_completion_time', models.DurationField(blank=True, null=True)),
                ('score_distribution', models.JSONField(blank=True, default=dict)),
                ('question_analytics', models.JSONField(blank=True, default=dict)),
                ('peak_usage_hours', models.JSONField(blank=True, default=list)),
                ('daily_attempts', models.JSONField(blank=True, default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('assessment_type', models.CharField(choices=[('quiz', 'Quiz'), ('exam', 'Exam')], max_length=10)),
                ('subject_category', models.CharField(choices=[('math', 'Mathematics'), ('science', 'Science'), ('english', 'English'), ('history', 'History'), ('programming', 'Programming'), ('general', 'General'), ('other', 'Other')], default='general', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('mixed', 'Mixed')], default='medium', max_length=10)),
                ('default_time_limit', models.PositiveIntegerField(blank=True, null=True)),
                ('default_max_attempts', models.PositiveIntegerField(default=1)),
                ('default_passing_score', models.PositiveIntegerField(default=60)),
                ('default_randomize_questions', models.BooleanField(default=False)),
                ('default_randomize_choices', models.BooleanField(default=False)),
                ('default_show_correct_answers', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False, help_text='Make template available to other teachers')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-usage_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to='imports/documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['docx', 'pdf'])])),
                ('document_type', models.CharField(choices=[('docx', 'Word Document (.docx)'), ('pdf', 'PDF Document (.pdf)')], max_length=10)),
                ('extract_questions', models.BooleanField(default=True)),
                ('extract_answers', models.BooleanField(default=True)),
                ('auto_categorize', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('needs_review', 'Needs Review')], default='pending', max_length=15)),
                ('questions_extracted', models.PositiveIntegerField(default=0)),
                ('questions_with_answers', models.PositiveIntegerField(default=0)),
                ('processing_log', models.JSONField(blank=True, default=dict)),
                ('error_messages', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MatchingPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_item', models.CharField(max_length=300)),
                ('right_item', models.CharField(max_length=300)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('subject_category', models.CharField(choices=[('math', 'Mathematics'), ('science', 'Science'), ('english', 'English'), ('history', 'History'), ('programming', 'Programming'), ('general', 'General'), ('other', 'Other')], default='general', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('mixed', 'Mixed')], default='medium', max_length=10)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='assessment',
            name='allow_backtrack',
            field=models.BooleanField(default=True, help_text='Allow students to go back to previous questions'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='allow_review',
            field=models.BooleanField(default=True, help_text='Allow students to review their answers before submitting'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='auto_submit',
            field=models.BooleanField(default=True, help_text='Automatically submit when time limit is reached'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='average_score',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name='assessment',
            name='completion_rate',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name='assessment',
            name='difficulty_level',
            field=models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('mixed', 'Mixed')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='assessment',
            name='disable_copy_paste',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assessment',
            name='email_results',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assessment',
            name='estimated_duration',
            field=models.PositiveIntegerField(blank=True, help_text='Estimated completion time in minutes', null=True),
        ),
        migrations.AddField(
            model_name='assessment',
            name='grading_method',
            field=models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual'), ('mixed', 'Mixed')], default='automatic', max_length=15),
        ),
        migrations.AddField(
            model_name='assessment',
            name='ip_restrictions',
            field=models.TextField(blank=True, help_text='Comma-separated list of allowed IP addresses/ranges'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='last_accessed',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='assessment',
            name='late_submission_penalty',
            field=models.PositiveIntegerField(default=0, help_text='Percentage penalty for late submissions', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='assessment',
            name='notify_on_submission',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='assessment',
            name='partial_credit',
            field=models.BooleanField(default=False, help_text='Allow partial credit for partially correct answers'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='questions_per_page',
            field=models.PositiveIntegerField(default=1, help_text='Number of questions to display per page', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)]),
        ),
        migrations.AddField(
            model_name='assessment',
            name='require_lockdown_browser',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assessment',
            name='require_webcam',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assessment',
            name='show_correct_answers_after',
            field=models.DateTimeField(blank=True, help_text='Show correct answers after this date/time', null=True),
        ),
        migrations.AddField(
            model_name='assessment',
            name='subject_category',
            field=models.CharField(choices=[('math', 'Mathematics'), ('science', 'Science'), ('english', 'English'), ('history', 'History'), ('programming', 'Programming'), ('general', 'General'), ('other', 'Other')], default='general', max_length=20),
        ),
        migrations.AddField(
            model_name='assessment',
            name='tags',
            field=models.CharField(blank=True, help_text='Comma-separated tags for organization', max_length=500),
        ),
        migrations.AddField(
            model_name='assessment',
            name='total_points',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assessment',
            name='view_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assessment',
            name='weighted_scoring',
            field=models.BooleanField(default=False, help_text='Use weighted scoring based on question difficulty'),
        ),
        migrations.AddField(
            model_name='choice',
            name='explanation',
            field=models.TextField(blank=True, help_text='Explanation for why this choice is correct/incorrect'),
        ),
        migrations.AddField(
            model_name='choice',
            name='image',
            field=models.ImageField(blank=True, help_text='Optional image for the choice', null=True, upload_to='choices/images/'),
        ),
        migrations.AddField(
            model_name='choice',
            name='partial_credit_percentage',
            field=models.PositiveIntegerField(default=0, help_text='Percentage of points to award for this choice', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='correctanswer',
            name='is_exact_match',
            field=models.BooleanField(default=True, help_text='Require exact match or allow partial matching'),
        ),
        migrations.AddField(
            model_name='correctanswer',
            name='keywords',
            field=models.CharField(blank=True, help_text='Keywords that must be present in student answer', max_length=500),
        ),
        migrations.AddField(
            model_name='correctanswer',
            name='weight',
            field=models.DecimalField(decimal_places=2, default=1.0, help_text='Weight of this answer for scoring', max_digits=5),
        ),
        migrations.AddField(
            model_name='question',
            name='allow_partial_credit',
            field=models.BooleanField(default=False, help_text='Allow partial credit for this question'),
        ),
        migrations.AddField(
            model_name='question',
            name='average_score',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
        ),
        migrations.AddField(
            model_name='question',
            name='blank_positions',
            field=models.JSONField(blank=True, default=list, help_text='Positions of blanks in the text for fill-in-the-blank questions'),
        ),
        migrations.AddField(
            model_name='question',
            name='difficulty_level',
            field=models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='question',
            name='explanation',
            field=models.TextField(blank=True, help_text='Explanation shown to students after answering (optional)'),
        ),
        migrations.AddField(
            model_name='question',
            name='hint',
            field=models.TextField(blank=True, help_text='Hint available to students (optional)'),
        ),
        migrations.AddField(
            model_name='question',
            name='image',
            field=models.ImageField(blank=True, help_text='Optional image for the question', null=True, upload_to='questions/images/'),
        ),
        migrations.AddField(
            model_name='question',
            name='import_confidence',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Confidence score for imported questions (0-100)', max_digits=5, null=True),
        ),
        migrations.AddField(
            model_name='question',
            name='imported_from_document',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='question',
            name='is_case_sensitive',
            field=models.BooleanField(default=False, help_text='For text-based questions: whether answers are case sensitive'),
        ),
        migrations.AddField(
            model_name='question',
            name='numeric_tolerance',
            field=models.DecimalField(blank=True, decimal_places=5, help_text='For numeric questions: acceptable range (+/-)', max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=models.CharField(blank=True, help_text='Comma-separated tags', max_length=300),
        ),
        migrations.AddField(
            model_name='question',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='question',
            name='usage_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='answer_changes',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='flag_reason',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='is_flagged',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='is_manually_graded',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='matching_answers',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='numeric_answer',
            field=models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='ordering_answers',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='selected_choices',
            field=models.ManyToManyField(blank=True, related_name='multi_selections', to='assessments.choice'),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='time_spent',
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='studentanswer',
            name='uploaded_file',
            field=models.FileField(blank=True, null=True, upload_to='student_answers/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt'])]),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='browser_info',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='copy_paste_attempts',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='current_question',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='ip_address',
            field=models.GenericIPAddressField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='is_auto_submitted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='is_submitted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='question_sequence',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='tab_switches',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='time_per_question',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='time_remaining',
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='time_taken',
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='user_agent',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='violation_flags',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='studentattempt',
            name='weighted_score',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name='assessment',
            name='assessment_type',
            field=models.CharField(choices=[('quiz', 'Quiz'), ('exam', 'Exam'), ('practice', 'Practice Test'), ('survey', 'Survey')], max_length=10),
        ),
        migrations.AlterField(
            model_name='assessment',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='assessment',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('scheduled', 'Scheduled'), ('archived', 'Archived'), ('suspended', 'Suspended')], default='draft', max_length=15),
        ),
        migrations.AlterField(
            model_name='question',
            name='assessment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.assessment'),
        ),
        migrations.AlterField(
            model_name='question',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='question',
            name='question_type',
            field=models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('identification', 'Identification'), ('enumeration', 'Enumeration'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('ordering', 'Ordering/Sequencing'), ('numeric', 'Numeric Answer')], max_length=20),
        ),
        migrations.AlterField(
            model_name='studentanswer',
            name='points_earned',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=8),
        ),
        migrations.AlterField(
            model_name='studentattempt',
            name='started_at',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddIndex(
            model_name='studentanswer',
            index=models.Index(fields=['attempt', 'question'], name='assessments_attempt_8f58c0_idx'),
        ),
        migrations.AddIndex(
            model_name='studentanswer',
            index=models.Index(fields=['question', 'is_correct'], name='assessments_questio_f97913_idx'),
        ),
        migrations.AddIndex(
            model_name='studentattempt',
            index=models.Index(fields=['student', 'assessment'], name='assessments_student_902c7e_idx'),
        ),
        migrations.AddIndex(
            model_name='studentattempt',
            index=models.Index(fields=['assessment', 'is_completed'], name='assessments_assessm_ecb2cd_idx'),
        ),
        migrations.AddField(
            model_name='assessmentanalytics',
            name='assessment',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='assessments.assessment'),
        ),
        migrations.AddField(
            model_name='assessmentgroup',
            name='assessments',
            field=models.ManyToManyField(blank=True, related_name='groups', to='assessments.assessment'),
        ),
        migrations.AddField(
            model_name='assessmentgroup',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_groups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessmenttemplate',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_from_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.assessmenttemplate'),
        ),
        migrations.AddField(
            model_name='documentimport',
            name='created_assessment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.assessment'),
        ),
        migrations.AddField(
            model_name='documentimport',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_imports', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_from_import',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.documentimport'),
        ),
        migrations.AddField(
            model_name='matchingpair',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_pairs', to='assessments.question'),
        ),
        migrations.AddField(
            model_name='questionbank',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_banks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionbank',
            name='shared_with',
            field=models.ManyToManyField(blank=True, related_name='shared_question_banks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='source_question_bank',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.questionbank'),
        ),
        migrations.AddField(
            model_name='question',
            name='question_bank',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.questionbank'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['creator', 'status'], name='assessments_creator_7f3397_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['assessment_type', 'subject_category'], name='assessments_assessm_6a9953_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['available_from', 'available_until'], name='assessments_availab_0506d4_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type', 'difficulty_level'], name='assessments_questio_3f9466_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['assessment', 'order'], name='assessments_assessm_815df6_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_bank'], name='assessments_questio_4cf2d3_idx'),
        ),
    ]
